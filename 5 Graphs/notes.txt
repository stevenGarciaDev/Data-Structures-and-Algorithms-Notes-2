Introduction

What are Graphs

Adjacency Matrix

Adjacency List

Exercise - Building a Graph

Solution - Adding Nodes and Edges

Solution - Removing Nodes and Edges

Traversal Algorithms

Exercise - Traversal Algorithms

Exercise - Depth-first Traversal (Recursive)

Solution - Depth-first Traversal (Recursive)

Exercise - Depth-first Traversal (iterative)

Solution - Depth-first Traversal (iterative)

Exercise - Breadth-first Traversal (Recursive)

Solution - Breadth-first Traversal (Recursive)

Exercise - Breadth-first Traversal (Iterative)

Solution - Breadth-first Traversal (Iterative)

Exercise - Topological Sorting

Solution - Topological Sorting

Exercise - Cycle Detection (Directed Graphs)

Solution - Cycle Detection (Directed Graphs)

Graphs Summary

/* ------

Introduction

  Most versatile data structure
  as it allows us to solve really
  interesting problems.

  // social network apps, GPS,
  // anywhere that we want to model
  // the relationships between
  // a bunch of objects

What are Graphs

  We use graphs to represent connected objects.

  Such as the routers on a network,
  or the users of a social network.

  This shows how people are connected and how
  strong their connections are.

  Graphs consist of nodes and edges.

  A tree is a graph, without any cycles.

  Also graphs don't have a root node.

  // node == vertex

  If two nodes are directly connected,
  we say that they are adjacent.

  If the edges have a direction,
  then we have a directed graph.

  // this is how twitter works,
  based on following

  Undirected is like Facebook or LinkedIn.

  The edges can also have a weight,
  which is used to represent
  how strong a connection is.

  On a social media platform,
  if two people interact a lot then
  can put a higher weight on their
  connection.

  This can be utilized to find their
  best friends by finding the edges with
  the highest weights.

  Another application in graphs is in
  finding the shortest path
  between two nodes.


Adjacency Matrix

  There are two ways to implement a graph
  in code.

  * adjacency matrix
  * adjacency list

  A matrix is a 2D array.

  // rows and columns

  mark intersection with a 1 or 0
  // true or false

  Example
            John      Steven      Joe

    John     0          1         0

    Steven   1          0         1

    Joe      1          0         0

  Easy to implement.

  Problem is that the amount of space
  needed.

  Space complexity O(n^2)


  Another problem, if we want to add a node

  we must add a column and a row,

  This requires us to make a new 2D array
  and then copy all the previous mappings.

  Add Node O(n^2)
  // expensive

  This can be optimized by reallocating
  a large matrix.
  // like amortized memory
  // but this WASTE memory

  we prefer to explain the time complexity
  of graphs in terms of
  vertices
  and edges

  Removing a node
  // must allocate a new smaller matrix
  // and copy items over
  O(v^2)

  Adding an edge

  Must find the index for the nodes.

  // Use a hash table to store the nodes
  // and their mappings to a conceptual value
  // such as
  // John => 0
  // Steven => 1
  // Joe => 2

  So Adding an edge
  O(1)

  Remove Edge
  O(1)

  query edge
  (lookup to see if a connection)
  O(1)

  For finding all the adjacent nodes
  // the neighboring
  Use hash table to find

  Then look at every item in that row

  So finding neighbors depends on the number
  of nodes/vertices
  O(v)

  Summary:

    Space O(v^2)

    // performs well for
    Add Edge        O(1)
    Remove Edge     O(1)
    Query Edge      O(1)
    Find neighbors  O(v)
    Add Nodes       O(v^2)
    Remove Nodes    O(v^2)

  So an Adjacency matrix
  is suitable if you know how many
  nodes you are going to need
  and you aren't going to add or remove them.

  // also not wasting space due to high
  // density in the graph
  (lots of connections between the nodes)

Adjacency List

  Using an array of linked list.

  Every element contains a linked list.

  It only stores the edges that exist.

    0: 1 -> 2 -> 3
    1: 2 -> 3
    2:
    3: 1

  We use a hash table to map
  the index of a node

    John: 0
    Mary: 1
    Bob: 2
    Alice: 3

  Space complexity

  Space: O(v + e)

    E = total edges

  Worst case scenario is where
  every node is connected to
  every other node.

  => Dense Graph
  E = v * (v - 1)

  // not linked to itself

  E = v^2 - v

  So
    O(v + e) = O(v^2)

    for space complexity for
    a dense graph

  -
  Add node, add a new element to the
  adjacency list

    Add a node O(1)

  To remove,
  must remove from the adjacency list
  as well as ensure that no other
  nodes have a link to that node
  so must iterate over the adjacency list

    Remove Node
    O(v + e)

    Worst case is with a dense graph
    E = v^2
    so
    then it'll be
    O(v^2)

  For adding an edge
    must ensure that the edge doesn't
    already exist
    let k represent the number of edges
    that a particular node has

    Add edge: O(k)

    Because must iterate through that linked
    list to ensure that the relationship
    doesn't already exists.

    Worst case:
    Add an edge O(v)


  A multi-graph allows more than one
  connection between two nodes
  therefor you don't have to check
  if there already is a connection,
  so adding an edge is O(1)

  For removing an edge,
  must iterate through

    Remove Edge: O(k)

    worst case: O(v)

  Find if an edge/connection exists?
  Query edge: O(k)
  worst case: O(v)

  time complexity for finding all the nodes
  adjacent to a node?

    Find neighbors: O(k)

    Worst case: O(v)

  -
  Summary

  // if dense, then would allocate the
  // same amount of space whether adjacency list
  // or matrix

    Adjacency Lists
  Space complexity  O(v + e)
  Add Edges         O(k)
  Remove Edge       O(k)
  Query Edge        O(k)
  find neighbors    O(k)
  add node          O(1)
  remove node       O(v^2)

  Which is better?

  The time complexities above are for the
  average scenario.

  The worst case is when the graph is dense.

    Adjacency Matrix: Worst case for Dense graph
  Space complexity  O(v^2)
  Add Edges         O(1)
  Remove Edge       O(1)
  Query Edge        O(1)
  find neighbors    O(v)
  add node          O(v^2)
  remove node       O(v^2)

    Adjacency List: Worst case for Dense graph
  Space complexity  O(v^2)
  Add Edges         O(v)
  Remove Edge       O(v)
  Query Edge        O(v)
  find neighbors    O(v)
  add node          O(1)
  remove node       O(v^2)

Exercise - Building a Graph

  Graph
    Node
      label: String
      // instead could be any data type
      // such as an object

    addNode(label)
      // wrap that string inside a node object

    removeNode(label)

    addEdge(from, to)

    removeEdge(from, to)

    print()
      // A is connected with [B, C]
      // B is connected with [A]
      // in a real app, you would not
      // implement print() within a graph
      // rather would use another way
      // to visually represent the graph

  -
  Building a Graph



Solution - Adding Nodes and Edges

  Graph.java

  package com.codewithmosh;

  public class Graph {
    private class Node {
      private String label;

      // command + n or control + n
      // for shortcut to generate constructor
      public Node(String label) {
        this.label = label;
      }

      @Override
      public String toString() {
        return label;
      }
    }

    private Map<String, Node> nodes = new HashMap<>();
    private Map<Node, List<Node>> adjacencyList = new HashMap<>();

    public void addNode(String label) {
      var node = new Node(label);
      // ensure we don't already have the node
      // list structure is not ideal for
      // searching
      // instead use a hash table

      nodes.putIfAbsent(label, node);
      adjacencyList.putIfAbsent(node, new ArrayList<>());
    }

    public void addEdge(String from, String to) {
      var fromNode = nodes.get(from);
      if (fromNode == null)
        throw new IllegalArgumentException();

      var toNode = nodes.get(from);
      if (toNode == null)
        throw new IllegalArgumentException();

      // directed graphs have more applications
      // in the real world,
      // but this shows a undirected graph
      adjacencyList.get(fromNode).add(toNode);
      adjacencyList.get(toNode).add(fromNode);
    }

    public void print() {
      for (var source : adjacencyList.keySet()) {
        var targets = adjacencyList.get(source);
        if (!targets.isEmpty())
          System.out.println(source + " is connected to " + targets);
      }
    }
  }

Solution - Removing Nodes and Edges

  public void removeNode(String label) {
    var node = nodes.get(label);
    if (node == null)
      return;

    // for each node in the adjacency list,
    // go through and remove
    // utilizing Java's HaspMap class
    for (var n : adjacencyList.keySet())
      adjacencyList.get(n).remove(node);

    adjacencyList.remove(node);
    nodes.remove(node);
  }

  public void removeEdge(String from, String to) {
    var fromNode = nodes.get(from);
    var toNode = nodes.get(to);

    if (fromNode == null || toNode == null)
      return;

    adjacencyList.get(fromNode).remove(toNode);
  }

  -

  var graph = new Graph();
  graph.addNode('A');
  graph.addNode('B');
  graph.addNode('C');
  graph.addEdge('A', 'B');
  graph.addEdge('A', 'C');
  graph.print();

  graph.removeEdge('A', 'C');
  graph.print();

  graph.removeEdge('A', 'D');
  graph.removeNode('B');
  graph.print();

Traversal Algorithms

  When traversing trees, we start
  from the root.

  However, in graphs we don't have a root
  node. We can start from any node
  and we will only visit the nodes
  that are reachable from that node.
  // not all nodes

  Such as finding people who are directly
  or indirectly connected to people.

  Consider direct graphs.

  Depth-first search

    Start from a node and recursively
    visit all its neighbors deeply.

    Can implement this with recursion
    or iteration.

  Breadth-first search

    We visit a node and all its neighbors
    before going further into a graph.

    We implement this using a queue.

    As we visit nodes, we'll add them
    to our queue.

    We will continue our traversal
    as long as the queue is not empty.

Exercise - Traversal Algorithms

  Do pdf

Exercise - Depth-first Traversal (Recursive)

  Use a recursive method.

  It takes a node object.

  So we'll visit it, and then recursively
  on all of its neighbors.

  Make sure you don't visit the same
  node twice and could end up in infinite
  recursion if a loop exist.

  // consider an undirected graph for example

  could use a list, but a list is
  not optimized for looking up an item
  as it'll be O(n) through unsorted data

  Could use a hash map for keeping track
  of nodes that we have visited.
  // stores key-value pairs

  But a better data structure would be
  a set. This is essentially a
  list with unique elements.
  // only stores the keys


Solution - Depth-first Traversal (Recursive)

  public void traverseDepthFirst(String root) {
    var node = nodes.get(root);
    if (node == null)
      return;

    this.traverseDepthFirst(nodes, new HashSet<>());
  }

  private void traverseDepthFirst(Node root, Set<Node> visited) {
    System.out.println(root);
    visited.add(root);

    for (var node : adjacencyList.get(root))
      if (!visited.contains(node))
        traverseDepthFirst(node, visited);
  }


Exercise - Depth-first Traversal (iterative)

  Could implement it using iterative.

  Consider how the Java runtime
  executes a method.

  It will push the parameter
  onto the stack, then will remove it
  from the stack.

  The purpose is to remember
  the value of the arguments in between
  method calls.

  // basically it 'jumps' back to it

  => Call stack
    // the value of arguments
    // in between method calls

  We can use a similar technique
  when implementing an iterative solution.

  push(root)
  while stack is not empty
    current = pop()
    visit(current)
    push each unvisited neighbor onto the stack

  -> we use the stack data structure

Solution - Depth-first Traversal (iterative)

  import java.util.Stack;

  public void traverseDepthFirst(String root) {
    var node = nodes.get(root);
    if (node == null)
      return;

    Set<Node> visited = new HashSet<>();
    Stack<Node> stack = new Stack<>();
    stack.push(node);

    while (!stack.isEmpty()) {
      var current = stack.pop();

      if (visited.contains(current))
        continue;

      System.out.println(current);
      visited.add(current);

      for (var neighbor : adjacencyList.get(current)) {
        if (!visited.contains(neighbor))
          stack.push(neighbor);
      }
    }
  }

Exercise - Breadth-first Traversal

  Everything is the same except for the
  data structure that is used.

  -> Use a queue!
  instead of a stack.

  Consider the queue
  F [] B

  In the while loop, we continually
  dequeue,
  then put its neighbors into the queue

  continue this process until all adjacent
  neighbors have been visited
  and the queue is empty

Solution - Breadth-first Traversal

  public void traverseBreadthFirst(String root) {
    var node = nodes.get(root);
    if (node == null)
      return;

    Set<Node> visited = new HashSet<>();

    Queue<Node> queue = new ArrayDeque<>();
    queue.add(node);

    while (!queue.isEmpty()) {
      var current = queue.remove();

      if (visited.contains(current))
        continue;

      System.out.println(current);
      visited.add(current);

      for (var neighbor : adjacencyList.get(current))
        if (!visited.contains(neighbor))
          queue.add(neighbor);
    }
  }

Exercise - Topological Sorting

  Project like a web or mobile app
  whose code is dependent on code
  from other projects.

  We want to compile/build our project,
  it needs to be compiled in the right order.

  Must build in the correct order
  based on their dependencies.

  Common interview questions.

  With topological sorting algorithm
  we can find out the right order
  that we need
  to process the nodes.

  Also applies to when processing jobs.
  Jobs which are dependent on each other,
  the topological sort comes up
  with the right order.

  It doesn't produce unique result.

  The implementation will determine
  what the output is.

  There are different ways to do it.

  NOTE: This algorithm only works
    on graphs without a cycle.

  Directed acyclic graphs

  // DAG
  acyclic => without a cycle

  Pick a node and do DFS,
  recursion stops

  Idea is that if we do DFS,
  we will find nodes with no outgoing Edges

  Nodes that have outgoing edges should come first.

  // USE a stack

  push a node onto the stack
  if we have completely explored
  a node (its children)

  Then pop off of stack to find
  the correct order.

  With a for loop,
  can run dfs on all.

  -
  Build a graph, add all nodes and edges
  then a new method

  topologicalSort()
  returns a list of strings

  and need a private method with recursive work
  which is similar to dfs,
  but we don't print to console,
  we just mark as visited then
  recursively visit its children,
  then push to the Stack

  The nodes that are deep in our hierarchy
  will end up at the bottom of our stack

  -> these are the nodes which are
  dependent on a lot of other nodes

  Summary:
  Topological Sort
  Take a directed acyclic graph and
  produce a linear ordering of its vertices

  It is used to determine the precise order
  in which steps must be completed.

  Use cases include:
    * precendence charts
    * optimizing database queries
    * multipying matrices

  1) So DFS is used to calculate the finish
  times for each of the vertices

  2) store the vertices in a list in decreasing
  order of finish time
  // push to stack once the vertex has been fully explored

  3) return the ordered list


Solution - Topological Sorting

  public List<String> topologicalSort() {
    // do DFS on every node

    Stack<Node> stack = new Stack<>();
    Set<Node> visited = new HashSet<>();

    for (var node : nodes.values())
      topologicalSort(node, visited, stack);

    // stack is populated in reverse order
    List<String> sorted = new ArrayList<>();
    while (!stack.empty())
      sorted.add(stack.pop().label);

    return sorted;
  }

  private void topologicalSort(Node node, Set<Node> visited, Stack<Node> stack) {
    // ensure not visiting the same node twice
    if (visited.contains(node))
      return;

    visited.add(node);

    // recursively visit all the children of the node
    for (var neighbor : adjacencyList.get(node))
      topologicalSort(neighbor, visited, stack);

    // after all children have been visited
    // push to the stack
    stack.push(node);
  }

  --

  public static void main(String[] args) {
    .....
    var list = graph.topologicalSort();
    System.out.println(list);
  }

Exercise - Cycle Detection (Directed Graphs)

  The topological sorting algorithm
  doesn't work if the graph has a cycle.

  To detect cycles in a directed graph ,
  must contain three sets of nodes.

  One set will keep track of all
  the nodes in the graph.

  One to store the nodes that
  we are currently visiting (exploring)

  and another to store the nodes
  which have been visited.
  // visited means that all of its children
  // have been visited

  Could call them
  red, green, and blue

  in response to interview question,
  write code to detect a cycle
  in a directed graph using colors

  -
  We start by adding all the nodes to the
  first set.

  Then we pick a random node from that set
  // it doesn't matter which one

  We start a DFS from that node,
  then we put it to the Visiting set.

  We continue exploring a node
  until all of its neighbors have been
  visited.
  In which case it can be removed from
  the visiting set and put to the
  visited set.

  -
  What about in the case where
  there is a cycle?

  This can be detected in the case
  when the visiting set,
  contains nodes,
  where
  a node has an adjacent neighbor
  which is already in the visited set.

  // meaning that it hasn't been fully
  // explored/visited yet

  This means that there is a way back to
  that node from one of its children
  or neighbors.

  If you want to print the nodes
  part of the cycle,
  must keep a mapping
  for nodes to their parent.

  We must keep a hash table from a node
  mapped to its parent.

  // parents hash table
  Node => parent

  A => null
  B => A
  C => B

  We found a cycle
  and we can use our hash table
  to construct it.

  A - B - C - A

  -

  hasCycle(): boolean

Solution - Cycle Detection (Directed Graphs)

  public boolean hasCycle() {
    Set<Node> all = new HashSet<>();
    // add all the nodes
    all.addAll(nodes.values());

    Set<Node> visiting = new HashSet<>();
    Set<Node> visited = new HashSet<>();

    // pick a node from the first set
    // to start our traversal
    while (!all.isEmpty()) {
      // convert the set to an array
      // as to access by index
      //var current = all.toArray(new Node[0])[0];

      // every collection in Java has a
      // method called iterator
      // which will turn an iterator object
      // it has a method called .next()
      var current = all.iterator().next();

      if (hasCycle(current, all, visiting, visited))
        return true;
    }
    return false;
  }

  private boolean hasCycle(Node node, Set<Node> all, Set<Node> visiting, Set<Node> visited) {
    all.remove(node);
    visiting.add(node);

    // now visit all the neighbors
    for (var neighbor : adjacencyList.get(node)) {
      if (visited.contains(neighbor))
        continue;

      // if neighbor is in the the visiting
      // set then we can conclude that we have a cycle
      if (visiting.contains(neighbor))
        return true;

      var result = hasCycle(neighbor, all, visiting, visited);
      if (result)
        return true;
    }
    visiting.remove(node);
    visited.add(node);

    return false;
  }

Graphs Summary

  We use graphs to represent connected objects.

  // people, projects, scheduled jobs, cities, etc

  Using graphs we can solve problems
  such as the shortest path between two areas.

  Another great application of graphs is
  finding the order to process a series
  of jobs or projects that are dependent
  on each other.
  // topological sorting

  There are two ways to implement a graph.

  * adjacency matrix
    // suitable for dense graphs

  * adjacency list
    // in reality often implement this way

  Two traversal algorithms
  // can use both to determine which
  // nodes are reachable from a given node

    * Breadth-first Search (BFS)

    * Depth-first Search (DFS)
